# getting info of all the adds

get_all_rental_ads <- function(first_page, current_page = 1){
  
  # define function that helps with error handling
  safe_read_html <- safely(read_html)
  
  # collect result and error
  gumtree_page <- safe_read_html(first_page)
  
  # repeat getting the page until it is not NULL
  while(is.null(gumtree_page$result)){
    
    Sys.sleep(1)
    
    logger::log_info(glue("Attempting {current_page} again\n{gumtree_page$error}"))
    
    gumtree_page <- safe_read_html(first_page)
    
  }
  
  gumtree_page <- gumtree_page$result
  
  
  # get_navigation_ready
  last_page = gumtree_page %>%
    html_elements(css = ".srpPagination") %>%
    html_elements(".page-number-container") %>%
    .[length(.)] %>% 
    # html_elements(".sudo-link") %>%
    html_text() %>%
    as.numeric()
  
  log_info(str_c("STARTING: ", current_page, " OF ", last_page))
  
  if(current_page == last_page){
    
    # identify the elements of the adds & save as a list
    gumtree_page_ads_list <- gumtree_page %>% 
      html_elements(xpath = "//span[div[div]]")
    
    df_out <- gumtree_page_ads_list %>% 
      map_dfr(., ~get_listing_info(.x))
    
    return(df_out)
    
  } else {
    
    gumtree_page_ads_list <- gumtree_page %>% 
      html_elements(xpath = "//span[div[div]]")
    
    current_page = current_page + 1
    
    page = first_page %>% gsub("(.*p)([0-9]+$)", "\\1", .) %>% 
      str_c(., current_page)
    
    Sys.sleep(2)
    
    other_pages <- get_all_rental_ads(
      first_page = page, 
      current_page = current_page
    )
    
    df_out <- gumtree_page_ads_list %>% 
      map_dfr(., get_listing_info) %>% 
      bind_rows(other_pages)
    
  }
  
  return(df_out)
  
}


